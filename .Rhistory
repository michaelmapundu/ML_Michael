# Chunk 1: setup
# load necessary R packages
list.of.packages <- c("knitr", "xtable", "gtools", "gridExtra", "car" )
# identify required packages that are not already installed
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
# install required packages that are not already installed
if(length(new.packages)) install.packages(new.packages)
#load the required packages
library(knitr)          # knitting support
library(lubridate)      # working with dates a little easier
library(tidyverse)      # data management collection (dplyr, plurrr, ggplot2, tidyr...)
library(readxl)         # importing excel data. Functionality absent in tidyverse
library(caret)          # for computing confusion matrix
library(openVA)         # Composed of InSilicoVA, InterVA4, InterVA5, Tariff packages
#library(InSilicoVA)     # InsilicoVA implementation
#library(InterVA4)       # InterVA implementation
# library and load the anaconda environment to use interface to python
library(reticulate)
use_condaenv(condaenv = NULL,
conda = "C:/Users/dell/anaconda3/python.exe",
required = FALSE
)
# set global chunk options
knitr::opts_chunk$set(
error = FALSE,
fig.align = "center",
fig.path = "figure/",
fig.show = "hold",
include = FALSE,
message = FALSE,
echo = FALSE,
cache = TRUE,
size = "small",
tidy = TRUE
)
opts_chunk$set(warning=FALSE, message=FALSE, error=FALSE, cache=FALSE)
opts_chunk$set(tidy=TRUE)
opts_chunk$set(cache=TRUE)
options(formatR.arrow=TRUE, width=60)
opts_chunk$set(size="small")
# read_chunk('code/VA-Algorithms.R') # put R code here with
# opts_knit$set(root.dir = "code/")
# working directory
setwd("C:/Users/a0056407/Desktop/CCVAFINAL2022/VAMachine - 22-05-2022")
rm(list=ls())
# Chunk 2: data_import
#py_run_file('VAScript_WHO_approach.py') NOT IMPLEMENTED ANYMORE
rawdata <- read_excel("C:/Users/a0056407/Desktop/CCVAFINAL2022/VAMachine - 22-05-2022/MichaelData.xlsx",
progress = readxl_progress()
)
# Chunk 3
dim(rawdata)
names(rawdata) <- unlist(lapply(names(rawdata), tolower))
# Chunk 4
rawdata$id <- as.numeric(rawdata$id)
nrow(rawdata[is.na(rawdata$id),])
# Chunk 5
# filter peculiar ids to create a staging file
stagedata <- rawdata %>%
# remove missing values from id
filter(!is.na(id)) %>%
# drop duplicated id. 7 observations will be dropped from the dataset
filter(!duplicated(id))
print(nrow(duplicated(stagedata$id)))
# Chunk 6
# introduce a new variable to unify sex
stagedata$sex <- ""
stagedata[ (stagedata$male=="y" & !is.na(stagedata$male)), c("sex")] <- "men"
stagedata[ (stagedata$female=="y" & !is.na(stagedata$female)), c("sex")] <- "women"
# drop missing sex value
stagedata <- stagedata[stagedata$sex=="men" | stagedata$sex=="women", ]
# Distribution of stratifying variable `sex`
table(stagedata$sex)
# Chunk 7
data(RandomVA1)
schema <- unlist(lapply(names(RandomVA1), tolower))
# custom negation for `in`
`%nin%` = Negate(`%in%`)
# Check which column names are not likely to be in the schema
sum((schema %nin% names(rawdata)))
# Chunk 8
vars_notin_autopsy <- setdiff(schema, names(rawdata))
print(vars_notin_autopsy)
# Chunk 9
# Create missing columns
for (i in vars_notin_autopsy){
stagedata[i] <- ""
}
# Chunk 10
stagedata <- stagedata %>%
filter(stagedata$id >= 100000 & !is.na(stagedata$id))
sum(is.na(stagedata$id))
# Chunk 11
# death age
stagedata$death_age <- as.numeric(as.character(stagedata$death_age))
stagedata %>% count(death_age > 110)
# 2 obs implausible
# dod
stagedata$dod <- as.Date(as.numeric(stagedata$dod),  origin = "1900-01-01")
stagedata$dyear <- format(stagedata$dod,"%Y")
stagedata %>% count(dyear < 1992 | dyear > 2016)
# 1 obs outlier.
# Chunk 12
stagedata <- stagedata %>%
# Remove those whose age was not captured
filter(death_age <= 110 & !is.na(death_age) ) %>%
# exclude implausible civil reg years
filter(dyear >= 1992 & dyear <= 2016)
# rename death_age to avoid confusion later
stagedata <- rename(stagedata, age = death_age)
# convert diagnoses to upper casse
stagedata$icdmain_consensus <- toupper(stagedata$icdmain_consensus)
# Chunk 13
# create a broad category for the diagnoses
stagedata$diagnose_cat <- ""
source("./VAMachine_InputA.r")
unique(stagedata$diagnose_cat)
nrow(stagedata)
# Chunk 14
stagedata <- stagedata %>%
filter(stagedata$diagnose_cat != "Unknown")
nrow(stagedata)
# Chunk 15
clinician <- stagedata %>%
select("id", "diagnose_cat", "sex", "age") %>%
filter(stagedata$diagnose_cat %in% unique(stagedata$diagnose_cat))
nrow(clinician)  # 16063
# view(as_data_frame(clinician[, c("diagnose_cat")]))
# Chunk 16
byYear <- aggregate(stagedata$dyear,
by=list(stagedata$dyear, stagedata$sex),
FUN=length
)
# proper names for the summarized data by year
names(byYear) <- c("year", "sex", "counts")
# Graph of general mortality trends over time.
# ggplot(data=byYear[byYear$year<=2016, ],   aes(x=year, y=counts, group=sex)) +
#     theme_bw() +
#     theme(
#         plot.title=element_text(hjust=0.5),
#         axis.text.x = element_text(angle = 90),
#         legend.position = "bottom"
#           ) +
#     labs(
#         title="Mortality trends by gender (1992-2016)",
#         x="civil registration years",
#         y = "All cause mortality"
#         ) +
#     geom_line(aes(linetype=sex, color=sex)) +
#     geom_point(aes(shape=sex, color=sex)) +
#     scale_color_brewer(palette = "Dark2")
#
#
# # save graph copies both in PDf and PNG
# ggsave("./figure/mortality_trends_gender.png")
# ggsave("./figure/mortality_trends_gender.pdf")
# Chunk 17
# WHO standard age categories
stagedata$agegroup <- ""
stagedata[stagedata$age>=0 & stagedata$age<=4, c('agegroup')] <- "0-4"      # under 5
stagedata[stagedata$age>=5 & stagedata$age<=14, c('agegroup')] <- "5-14"    # children
stagedata[stagedata$age>=15 & stagedata$age<=49, c('agegroup')] <- "15-49"  # reproductive years
stagedata[stagedata$age>=50 & stagedata$age<=64, c('agegroup')] <- "50-64"  # middle age
stagedata[stagedata$age>=65 & stagedata$age<=110, c('agegroup')] <- "65+"   # elders
# by questionnaire categories
stagedata <- stagedata %>%
mutate(agegroup2 = case_when(neonate == "y" ~ "neonate",
infant == "y" ~ "infant",
under5 == "y" ~ "under5",
child == "y" ~ "child",
adult == "y" ~ "adult",
midage == "y" ~ "midage",
elder == "y" ~ "elder"
)
)
# Chunk 18
# stagedata$cohort <- cut(stagedata$dyear, breaks = 6, right = TRUE )
# create simpler-to-inteprete death cohort using 3-year gap intervals apart from the period 1992-1997 (earlier years)
stagedata <- stagedata %>%
mutate(cohort = case_when(dyear>=1992 & dyear<=1997 ~ "1992-1997",
dyear>=1998 & dyear<=2000 ~ "1998-2000",
dyear>=2001 & dyear<=2003 ~ "2001-2003",
dyear>=2004 & dyear<=2006 ~ "2004-2006",
dyear>=2007 & dyear<=2009 ~ "2007-2009",
dyear>=2010 & dyear<=2012 ~ "2010-2012",
dyear>=2013 & dyear<=2016 ~ "2013-2016")
)
# Chunk 19
byCohortAgegp <- aggregate(
stagedata$agegroup,
by = list(stagedata$cohort, stagedata$agegroup),
FUN=length
)
# define proper names for the new dataset
names(byCohortAgegp) <- c("cohort", "agegroup", "counts")
# Reorder the factor variable to align legend
byCohortAgegp$agegroup <- factor(
byCohortAgegp$agegroup, levels = c("0-4", "5-14", "15-49", "50-64", "65+"))
# Chunk 20
# ggplot(byCohortAgegp,  aes(x=cohort, y=counts))+
#     geom_col(aes(fill=agegroup), width=0.7)+
#     theme_bw() +
#     labs(
#         title="Mortality trends by age group (1992-2016)",
#         x="civil registration years",
#         y = "All cause mortality"
#         ) +
#     theme(
#         plot.title = element_text(hjust=0.5),
#         axis.text.x = element_text(angle = 0),
#         legend.position = "bottom"
#         ) +
#     scale_fill_brewer(palette="Spectral")
#
#
# # save the graphs both as pdf and png
# ggsave("./figure/mortality_trends_agegp_img1.png")
# ggsave("./figure/mortality_trends_agegp_img1.pdf")
# Chunk 21
# ggplot(byCohortAgegp,  aes(x=cohort, y=counts, fill=agegroup))+
#     geom_bar(position="fill", stat="identity", width=0.7) +
#     theme_bw() + #theme_classic() +
#     labs(
#         title="Mortality trends by age group (1992-2016)",
#         x="civil registration years",
#         y = "All cause mortality (percent)"
#         ) +
#     theme(
#         plot.title = element_text(hjust=0.5),
#         axis.text.x = element_text(angle = 0),
#         legend.position = "bottom"
#         ) +
#     scale_fill_brewer(palette="Spectral") # RdYIBu
#
#
# # save the graphs both as pdf and png
# ggsave("./figure/mortality_trends_agegp_img2.png")
# ggsave("./figure/mortality_trends_agegp_img2.pdf")
# Chunk 22
extra_vars <- c('age', 'agegroup', 'sex', 'dyear', 'cohort')
schema_extended <- append(schema, extra_vars)
stagedata <- select(stagedata, all_of(schema_extended))
# Also replace all na's to BLANK for conformity
for (i in names(stagedata)){
if (i!="id" & i %nin% extra_vars){
stagedata[is.na( stagedata[i] ), c(i)] <- ""
}
}
# Chunk 23
# Number of observation considered
nrow(stagedata)
#-------------- age distribution
# hist(stagedata$age, breaks=30) # the data are right skewed
# standard deviation
median(stagedata$age)
IQR(stagedata$age)
# Mean age at death general
mean(stagedata$age)
sd(stagedata$age)
# sex distribution
table(stagedata$sex)
#  men women
# 8354  7709
# pecentage men
# 8354 / 16063
# women
# 7709 / 16063
# Chunk 24
# Forge a schema with sub-population variables
data(RandomVA2)
schema_insilico <- unlist(lapply(names(RandomVA2), tolower))
insilico_data <- stagedata %>%
select(all_of(schema_insilico))
# Standardize all entries to Capital case to match VA standard
for (i in names(insilico_data)){
if (i!="id" & i %nin% extra_vars){
insilico_data[i] <- unlist(lapply(insilico_data[i], toupper))
}
}
# fill in data not collected i.e variable introduced
for (i in vars_notin_autopsy){
insilico_data[i] <- "."
}
# convert the tibble into dataframe to enable datachecks with the algorithm
df_insilico_data <- as.data.frame(insilico_data)
# fit model
fit_insilico <- insilico(df_insilico_data,
data.type=c('WHO2012', 'WHO2016', 'PHMRC', 'customized')[1],
isNumeric = FALSE,
directory = "./insilico_output",
Nsim = 4000,
burnin = 2000,
thin = 10 ,
seed = 1,
datacheck = TRUE,
warning.write = TRUE,
auto.length = TRUE
)
# summary(fit_insilico)
# Chunk 25
csmfInsilico <- as.data.frame(getCSMF(fit_insilico))
plot( fit_insilico,
type = c("errorbar", "bar", "compare")[3],
top = 12,
causelist = NULL,
xlab = "Causes",
ylab = "CSMF",
title = "Top-12 population COD distribution (1992-2016)",
horiz = TRUE,
angle = 60,
fill = "gray",
err_width = 0.2,
err_size = 0.4,
point_size = 2,
border = "black",
bw = FALSE
)
# save the graphs both as pdf and png
ggsave("./figure/top12_COD_insilico.png")
ggsave("./figure/top12_COD_insilico.pdf")
# Chunk 26
interVA_data <- stagedata[, 1:246]
# All true values are already in lower case.
# Just fill in data not collected i.e variable introduced
for (i in vars_notin_autopsy){
interVA_data[i] <- NA
}
# formatting
for (i in names(interVA_data)){
if (i != "id" & i %nin% extra_vars){
interVA_data[( interVA_data[i] != "y" &
!is.na(interVA_data[i]) &
interVA_data[i] != ""
), c(i)
] <- ""
}
}
# Fit model.
# Remember, from the data, it is known that HIV prevalence is high;
# and malaria prevalence is low
fit_interva <- InterVA(interVA_data,
HIV = "h",
Malaria = "l",
directory = "./inverVA_output",
filename = "interVA_results",
output = "extended",
append = FALSE,
groupcode = FALSE,
replicate = FALSE,
replicate.bug1 = FALSE,
replicate.bug2 = FALSE,
write = TRUE
)
# Chunk 27
InterVAdf <- read.csv("./inverVA_output/interVA_results.csv") %>%
select(ID, CAUSE1)
# give meaningful names
names(InterVAdf) <- c("id", "predicted")
InterVAdf[InterVAdf$predicted==" ", "predicted"] <- 'UNK'
#names(interVA_results)
unique(InterVAdf$predicted)
# initialize the broad category column
InterVAdf["predicted_cat"] <- NA
source("./VAMachine_InputB.r")
unique(InterVAdf$predicted_cat)
# Chunk 28
csmfInterva <- as.data.frame(getCSMF(fit_interva))
# Chunk 29
byCoD <- aggregate(InterVAdf$predicted,
by=list(InterVAdf$predicted),
FUN=length
)
byCoD$CSMF <- round(byCoD$x / sum(byCoD$x), 4)
byCoD <- byCoD[order(byCoD$x, decreasing = TRUE), ]
# Chunk 30
byCoD_12 <-  byCoD %>%
filter(Group.1 != "UNK") %>%
top_n(12) %>%
mutate(Group.1 = fct_reorder(Group.1, CSMF))
# save a copy for reporting
write.csv(byCoD_12, "./inverVA_output/byCoD_12.csv")
# Chunk 31
ggplot(byCoD_12, aes(x=Group.1, y=CSMF)) +
geom_bar(stat="identity", fill="#f68060", alpha=.8, width=.6) +
coord_flip() +
theme_bw() +
# geom_text(aes(label=x)) +
labs(
title="Top 12 population cause of death distribution",
y="Cause Specific Mortality Fraction",
x = "Cause of death"
) +
theme(
plot.title = element_text(hjust=0.5, vjust=3.5),
axis.text.x = element_text(angle = 0),
legend.position = "none"
)
# save the graphs both as pdf and png
ggsave("./figure/top12_COD_interva.png")
ggsave("./figure/top12_COD_interva.pdf")
# Chunk 32
# introduce the sex variable from the clinician dataset
InterVAdfMerged <- merge(InterVAdf, clinician,
by.x="id", by.y="id",
all.x = TRUE)
# Get the top-12 causes from the general list of causes-per-id that are in the top-12
top12 <- InterVAdfMerged[InterVAdfMerged$predicted %in% byCoD_12$Group.1, ]
# compute stats
top12_age_gender <- top12 %>%
group_by(predicted, sex) %>%
summarise(
n=n(),
mean=mean(age),
sd=sd(age)
) %>%
mutate( se=sd/sqrt(n))  %>%
mutate( ic=se * qt((1-0.05)/2 + .5, n-1)) # %>% mutate(predicted = fct_reorder(predicted, mean))
# save a copy for reporting
write.csv(byCoD_12, "./inverVA_output/top12_age_gender.csv")
# using standard deviation
ggplot(top12_age_gender, aes(x=predicted, y=mean, fill=sex)) +
theme_bw() +
geom_bar(stat="identity",
color="black",
position=position_dodge(),
alpha=0.5,
width=0.9) +
geom_errorbar(aes(ymin=mean-sd, ymax=mean+sd),
width=.1,
position=position_dodge(.9),
size=0.2) +
theme( plot.title = element_text(hjust=0.5),
axis.text.x = element_text(angle = 270),
legend.position = "top" ) +
labs( title="Cause specific average age at death by gender",
y="age at death",
x = "Cause of death" ) +
theme(axis.text.x = element_text(vjust = 0, hjust=0))
# save the graphs both as pdf and png
ggsave("./figure/mortality_by_gender_interva.png")
ggsave("./figure/mortality_by_gender_interva.pdf")
# Chunk 33
interva_clinician <- merge(x=InterVAdf, y=clinician,
by.x="id",
by.y = "id",
all.x = TRUE)
nrow(interva_clinician)
# Chunk 34
InterVAdf_ <- interva_clinician[, c("id", "predicted_cat")]
clinician_ <- interva_clinician[, c("id", "diagnose_cat")]
IntervaCCC <- getCCC(InterVAdf_, clinician_, C=NULL)
print(IntervaCCC)
# Chunk 35
# true CSMF
trueCSMF <- aggregate(clinician_$diagnose_cat, by=list(clinician_$diagnose_cat),  FUN=length )
trueCSMF$csmfTrue <- round(trueCSMF$x / sum(trueCSMF$x), 4)
trueCSMF[order(trueCSMF$x, decreasing = TRUE), ]
# Chunk 36
# predicted CSMF by
predCMSF <- aggregate(InterVAdf_$predicted_cat, by=list(InterVAdf_$predicted_cat), FUN=length)
predCMSF$csmfPred <- round(predCMSF$x / sum(predCMSF$x), 4)
predCMSF[order(predCMSF$x, decreasing = TRUE), ]
# Chunk 37
CSMF <- merge(predCMSF, trueCSMF, by="Group.1")
names(CSMF) <- c("COD", "Npredicted", "csmfPred", "NTrue", "csmfTrue")
getCSMF_accuracy(CSMF$csmfPred, CSMF$csmfTrue)
